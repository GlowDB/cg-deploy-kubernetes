releases:
- name: cron
  version: latest

instance_groups:
- name: consul
  vm_extensions: [kubernetes-sg]
  persistent_disk_type: kubernetes
  networks:
  - name: services
    static_ips:
    - (( grab terraform_outputs.kubernetes_static_ips.[0] ))
    - (( grab terraform_outputs.kubernetes_static_ips.[1] ))
    - (( grab terraform_outputs.kubernetes_static_ips.[2] ))
  jobs:
  - name: consul
    properties:
      consul:
        domain: "kubernetes"
        default_recursor: (( grab terraform_outputs.vpc_cidr_dns ))
        agent_config:
          addresses:
            http: "127.0.0.1"
            https: "127.0.0.1"

- name: etcd
  persistent_disk_type: kubernetes
  vm_extensions: [kubernetes-sg, kubernetes-etcd-profile]
  networks:
  - name: services
    static_ips:
    - (( grab terraform_outputs.kubernetes_static_ips.[3] ))
    - (( grab terraform_outputs.kubernetes_static_ips.[4] ))
    - (( grab terraform_outputs.kubernetes_static_ips.[5] ))
  jobs:
  - (( append ))
  - name: cron
    release: cron
    properties:
      cron:
        variables:
          AWS_DEFAULT_REGION: (( grab meta.aws.default_region ))
          S3_BUCKET_NAME: (( grab meta.etcd_bucket_name ))
        entries:
        - script:
            name: etcdbackup.sh
            contents: (( file "cronjobs/etcdbackup.sh" ))
          minute: '*/15'
          hour: '*'
          day: '*'
          month: '*'
          wday: '*'
          user: root

- name: master
  persistent_disk_type: kubernetes
  vm_extensions: [kubernetes-lb, kubernetes-sg, kubernetes-master-profile]
  networks:
  - name: services
    static_ips:
    - (( grab terraform_outputs.kubernetes_static_ips.[6] ))
    - (( grab terraform_outputs.kubernetes_static_ips.[7] ))
    - (( grab terraform_outputs.kubernetes_static_ips.[8] ))
  jobs:
  - name: kubernetes-master
    properties:
      consul:
        encrypt: (( grab instance_groups.consul.jobs.consul.properties.consul.encrypt ))
  - name: docker
    properties:
      docker:
        flannel: true
        log_options: [max-size=10m, max-file=1]
  - name: flannel
    properties:
      apiserver:
        ip: (( grab instance_groups.etcd.networks.services.static_ips.[0] ))

- name: minion
  instances: 7
  persistent_disk_type: kubernetes
  vm_extensions: [kubernetes-sg, kubernetes-minion-profile]
  networks:
  - name: services
    static_ips:
    - (( grab terraform_outputs.kubernetes_static_ips.[9] ))
    - (( grab terraform_outputs.kubernetes_static_ips.[10] ))
    - (( grab terraform_outputs.kubernetes_static_ips.[11] ))
    - (( grab terraform_outputs.kubernetes_static_ips.[12] ))
    - (( grab terraform_outputs.kubernetes_static_ips.[13] ))
    - (( grab terraform_outputs.kubernetes_static_ips.[14] ))
    - (( grab terraform_outputs.kubernetes_static_ips.[15] ))
  jobs:
  - name: docker
    properties:
      docker:
        flannel: true
        log_options: [max-size=10m, max-file=1]
  - name: flannel
    properties:
      apiserver:
        ip: (( grab instance_groups.etcd.networks.services.static_ips.[0] ))
  - name: kubernetes-minion
    properties:
      eviction-hard: memory.available<2Gi
  - name: cron
    release: cron
    properties:
      cron:
        variables:
          IMAGES: >-
            busybox
            18fgsa/elasticsearch-ha:2.4.4
            18fgsa/redis:3.2.10
            18fgsa/redis-server-init:3.2.10
            18fgsa/redis-sentinel-init:3.2.10
            18fgsa/redis-sentinel-proxy:1.0.0
        entries:
        - script:
            name: pull-images.sh
            contents: (( file "cronjobs/pull-images.sh" ))
          minute: '0'
          hour: '0'
          day: '*'
          month: '*'
          wday: '*'
          user: root

- name: create-kubernetes-dns
  vm_extensions: [kubernetes-sg, errand-profile]

- name: apply-kubernetes-manifests
  vm_extensions: [kubernetes-sg, errand-profile]
  jobs:
  - name: apply-kubernetes-manifests
    properties:
      manifests:
      - content: (( file "manifests/storage-class.yaml" ))
      - content: (( file "manifests/kube2iam.yaml" ))
        recreate: true
      - content: (( file "manifests/fluentd-cloudwatch.yaml" ))
        recreate: true

update:
  canaries: 0
  max_in_flight: 1
  canary_watch_time: 30000-600000
  update_watch_time: 30000-600000
  serial: true
