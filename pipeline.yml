---
groups:
- name: all
  jobs:
  - fluentd-cloudwatch
  - elasticsearch-24
  - mongo-32
  - redis32
  - deploy-kubernetes-development
  - deploy-kubernetes-broker-development
  - acceptance-tests-development
  - deploy-kubernetes-staging
  - deploy-kubernetes-broker-staging
  - acceptance-tests-staging
  - deploy-kubernetes-production
  - deploy-kubernetes-broker-production
  - acceptance-tests-production
  - test-exporter
  - test-exporter-development
  - deploy-exporter-development
  - deploy-exporter-staging
  - deploy-exporter-production
- name: development
  jobs:
  - deploy-kubernetes-development
  - deploy-kubernetes-broker-development
  - test-exporter-development
  - deploy-exporter-development
  - acceptance-tests-development
- name: staging
  jobs:
  - deploy-kubernetes-staging
  - deploy-kubernetes-broker-staging
  - test-exporter
  - deploy-exporter-staging
  - acceptance-tests-staging
- name: production
  jobs:
  - deploy-kubernetes-production
  - deploy-kubernetes-broker-production
  - deploy-exporter-production
  - acceptance-tests-production
- name: docker-images
  jobs:
  - fluentd-cloudwatch
  - elasticsearch-24
  - mongo-32
  - elasticsearch-base
  - elasticsearch-ha
  - redis32

params:
  development:
    cf: &cf-development
      CF_API_URL: ((cf-api-url-development))
      CF_USERNAME: ((cf-deploy-username-development))
      CF_PASSWORD: ((cf-deploy-password-development))
      CF_ORGANIZATION: ((cf-organization-development))
      CF_SPACE: ((cf-space-development))
    cf-tests: &cf-development-tests
      CF_API_URL: ((cf-api-url-development))
      CF_USERNAME: ((cf-deploy-username-development))
      CF_PASSWORD: ((cf-deploy-password-development))
      CF_ORGANIZATION: ((cf-organization-development))
      CF_SPACE: ((cf-space-development-acctests))
    bosh-errand: &bosh-errand-development
      BOSH_TARGET: ((kubernetes-development-deployment-bosh-target))
      BOSH_USERNAME: ((kubernetes-development-deployment-bosh-username))
      BOSH_PASSWORD: ((kubernetes-development-deployment-bosh-password))
      BOSH_DEPLOYMENT_NAME: ((kubernetes-development-deployment-bosh-deployment))
      BOSH_CACERT: common/master-bosh.crt
  staging:
    cf: &cf-staging
      CF_API_URL: ((cf-api-url-staging))
      CF_USERNAME: ((cf-deploy-username-staging))
      CF_PASSWORD: ((cf-deploy-password-staging))
      CF_ORGANIZATION: ((cf-organization-staging))
      CF_SPACE: ((cf-space-staging))
    cf-tests: &cf-staging-tests
      CF_API_URL: ((cf-api-url-staging))
      CF_USERNAME: ((cf-deploy-username-staging))
      CF_PASSWORD: ((cf-deploy-password-staging))
      CF_ORGANIZATION: ((cf-organization-staging))
      CF_SPACE: ((cf-space-staging-acctests))
    bosh-errand: &bosh-errand-staging
      BOSH_TARGET: ((kubernetes-staging-deployment-bosh-target))
      BOSH_USERNAME: ((kubernetes-staging-deployment-bosh-username))
      BOSH_PASSWORD: ((kubernetes-staging-deployment-bosh-password))
      BOSH_DEPLOYMENT_NAME: ((kubernetes-staging-deployment-bosh-deployment))
      BOSH_CACERT: common/master-bosh.crt
  production:
    cf: &cf-production
      CF_API_URL: ((cf-api-url-production))
      CF_USERNAME: ((cf-deploy-username-production))
      CF_PASSWORD: ((cf-deploy-password-production))
      CF_ORGANIZATION: ((cf-organization-production))
      CF_SPACE: ((cf-space-production))
    cf-tests: &cf-production-tests
      CF_API_URL: ((cf-api-url-production))
      CF_USERNAME: ((cf-deploy-username-production))
      CF_PASSWORD: ((cf-deploy-password-production))
      CF_ORGANIZATION: ((cf-organization-production))
      CF_SPACE: ((cf-space-production-acctests))
    bosh-errand: &bosh-errand-production
      BOSH_TARGET: ((kubernetes-production-deployment-bosh-target))
      BOSH_USERNAME: ((kubernetes-production-deployment-bosh-username))
      BOSH_PASSWORD: ((kubernetes-production-deployment-bosh-password))
      BOSH_DEPLOYMENT_NAME: ((kubernetes-production-deployment-bosh-deployment))
      BOSH_CACERT: common/master-bosh.crt
  acceptance:
    redis28-tests: &redis28-tests
      SERVICE_NAME: redis28
      PLAN_NAME: standard
      TEST_PATH: kubernetes-config/acceptance/redis28
    redis32-micro-tests: &redis32-micro-tests
      SERVICE_NAME: redis32
      PLAN_NAME: micro
      TEST_PATH: kubernetes-config/acceptance/redis32
    redis32-tests: &redis32-tests
      SERVICE_NAME: redis32
      PLAN_NAME: standard
      TEST_PATH: kubernetes-config/acceptance/redis32
    redis32-ha-tests: &redis32-ha-tests
      SERVICE_NAME: redis32
      PLAN_NAME: standard-ha
      TEST_PATH: kubernetes-config/acceptance/redis32
    mongodb32-tests: &mongodb32-tests
      SERVICE_NAME: mongodb32
      PLAN_NAME: standard
      TEST_PATH: kubernetes-config/acceptance/mongodb32
    elasticsearch24-tests: &elasticsearch24-tests
      SERVICE_NAME: elasticsearch24
      PLAN_NAME: 1x
      TEST_PATH: kubernetes-config/acceptance/elasticsearch24

jobs:
- name: fluentd-cloudwatch
  plan:
  - get: fluentd-cloudwatch-config
    trigger: true
  - put: docker-hub-fluentd-cloudwatch
    params:
      build: fluentd-cloudwatch-config/images/fluentd-cloudwatch

- name: elasticsearch-24
  plan:
  - get: kubernetes-broker-images
    trigger: true
  - put: docker-hub-elasticsearch-24
    params:
      build: kubernetes-broker-images/custom_images/docker-elasticsearch-kubernetes-auth-24
- name: mongo-32
  plan:
  - get: kubernetes-broker-images
    trigger: true
  - put: docker-hub-mongo-32
    params:
      build: kubernetes-broker-images/custom_images/mongo32
- name: elasticsearch-base
  plan:
  - get: erry-day
    trigger: true
  - get: dockerfile-elasticsearch-base
    # pin ES version to 2.4.4
    version:
      ref: 8f00ad520c1c33b879a715700905d3c25c526331
  - put: docker-hub-elasticsearch-base
    params:
      build: dockerfile-elasticsearch-base/2.4
- name: elasticsearch-ha
  plan:
  - get: kubernetes-broker-images
    trigger: true
  - get: docker-hub-elasticsearch-base
    trigger: true
    passed:
    - elasticsearch-base
    params:
      skip_download: true
  - put: docker-hub-elasticsearch-ha
    params:
      build: kubernetes-broker-images/custom_images/elasticsearch-pet-24

- name: redis32
  plan:
  - get: erry-day
    trigger: true
  - get: kubernetes-broker-images
    trigger: true
  - put: docker-hub-redis32
    params:
      build: kubernetes-broker-images/custom_images/redis-3.2

- name: deploy-kubernetes-development
  serial: true
  plan:
  - aggregate:
    - get: common
      resource: master-bosh-root-cert
    - get: pipeline-tasks
    - get: kubernetes-release
      resource: kubernetes-release-development
      params:
        submodules: none
    - get: kubernetes-config
      resource: kubernetes-config-development
      trigger: true
    - get: kubernetes-release-tarball
      resource: kubernetes-release-tarball-development
      trigger: true
    - get: common-secret
      resource: common-development
      trigger: true
    - get: kubernetes-stemcell
      trigger: true
    - get: consul-boshrelease
      trigger: true
    - get: terraform-yaml
      resource: terraform-yaml-development
  - task: kubernetes-manifest
    file: kubernetes-config/build-k8s-manifest.yml
    params:
      CLOUDWATCH_PARAMS: ((cloudwatch-params-development))
      KUBE2IAM_PARAMS: ((kube2iam-params-development))
      TARGET_ENVIRONMENT: development
  - &lint-manifest
    task: lint-manifest
    file: pipeline-tasks/lint-manifest.yml
    input_mapping:
      pipeline-config: kubernetes-config
      lint-manifest: kubernetes-manifest
    params:
      LINTER_CONFIG: bosh-lint.yml
  - put: kubernetes-development-deployment
    params: &deployment-params
      manifest: kubernetes-manifest/manifest.yml
      releases:
      - kubernetes-release-tarball/*.tgz
      - consul-boshrelease/*.tgz
      stemcells:
      - kubernetes-stemcell/*.tgz
  - task: create-kubernetes-dns
    file: pipeline-tasks/bosh-errand.yml
    params:
      BOSH_ERRAND: create-kubernetes-dns
      <<: *bosh-errand-development
  - task: create-kubernetes-monitoring
    file: pipeline-tasks/bosh-errand.yml
    params:
      BOSH_ERRAND: create-kubernetes-monitoring
      <<: *bosh-errand-development
  - task: apply-kubernetes-manifests
    file: pipeline-tasks/bosh-errand.yml
    params:
      BOSH_ERRAND: apply-kubernetes-manifests
      <<: *bosh-errand-development
  on_failure:
    put: slack
    params:
      text: |
        :x: FAILED to deploy kubernetes on development
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: Successfully deployed kubernetes on development
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))

- name: deploy-kubernetes-broker-development
  serial: true
  plan:
  - aggregate:
    - get: pipeline-tasks
    - get: kubernetes-broker
      resource: kubernetes-broker-development
      trigger: true
    - get: kubernetes-config
      resource: kubernetes-config-development
      passed: [deploy-kubernetes-development]
    - get: kubernetes-development-deployment
      passed: [deploy-kubernetes-development]
      trigger: true
  - task: run-tests
    file: kubernetes-config/run-tests.yml
  - put: kubernetes-broker-development-deployment
    params:
      manifest: kubernetes-broker/manifest.yml
      path: kubernetes-broker
      current_app_name: kubernetes-broker
      environment_variables:
        AUTH_USER: ((broker-auth-user-development))
        AUTH_PASS: ((broker-auth-pass-development))
        CONNECTOR_TYPE: static
        CONSUL_DOMAIN: ((consul-domain-development))
        CLUSTER_API_SERVER: ((api-server-development))
        CLUSTER_USERNAME: ((cluster-username-development))
        CLUSTER_PASSWORD: ((cluster-password-development))
        CF_CLIENT_ID: kubernetes-client
        CF_CLIENT_SECRET: ((cf-client-secret-development))
        CF_TOKEN_URL: ((cf-token-url-development))
        CF_API_ENDPOINT: ((cf-api-url-development))
        CF_TOKEN_KEY: ((cf-token-key-development))
  - task: register-service-broker-development
    file: pipeline-tasks/register-service-broker.yml
    params:
      <<: *cf-development
      BROKER_NAME: kubernetes-broker
      AUTH_USER: ((broker-auth-user-development))
      AUTH_PASS: ((broker-auth-pass-development))
      SERVICES: ((broker-service-names-development))

- name: acceptance-tests-development
  serial: true
  plan:
  - aggregate:
    - get: kubernetes-config
      resource: kubernetes-config-development
      passed: [deploy-kubernetes-broker-development]
      trigger: true
    - get: kubernetes-broker
      resource: kubernetes-broker-development
      passed: [deploy-kubernetes-broker-development]
      trigger: true
  - task: clear-acceptance-space
    file: kubernetes-config/acceptance/clear-acceptance-space.yml
    params: *cf-development-tests
  - aggregate:
    - task: acceptance-test-redis28-standard
      file: kubernetes-config/acceptance/run-acceptance-test.yml
      params:
        <<: *cf-development-tests
        <<: *redis28-tests
    - task: acceptance-test-redis32-micro
      file: kubernetes-config/acceptance/run-acceptance-test.yml
      params:
        <<: *cf-development-tests
        <<: *redis32-micro-tests
    - task: acceptance-test-redis32-standard
      file: kubernetes-config/acceptance/run-acceptance-test.yml
      params:
        <<: *cf-development-tests
        <<: *redis32-tests
    - task: acceptance-test-redis32-standard-ha
      file: kubernetes-config/acceptance/run-acceptance-test.yml
      params:
        <<: *cf-development-tests
        <<: *redis32-ha-tests
        # EXTRA TESTS are executed with CWD = TEST_PATH
        EXTRA_TESTS: ./redis-ha.sh
        K8S_USERNAME: ((cluster-username-development))
        K8S_PASSWORD: ((cluster-password-development))
        K8S_APISERVER: ((api-server-development))
    - task: acceptance-test-mongo32-standard
      file: kubernetes-config/acceptance/run-acceptance-test.yml
      params:
        <<: *cf-development-tests
        <<: *mongodb32-tests
    - task: acceptance-test-elasticsearch24-persistent
      file: kubernetes-config/acceptance/run-acceptance-test.yml
      params:
        <<: *cf-development-tests
        <<: *elasticsearch24-tests
    - task: acceptance-test-elasticsearch24-ha
      file: kubernetes-config/acceptance/run-acceptance-test.yml
      params:
        <<: *cf-development-tests
        SERVICE_NAME: elasticsearch24
        PLAN_NAME: medium-ha
        TEST_PATH: kubernetes-config/acceptance/elasticsearch24
        # EXTRA TESTS are executed with CWD = TEST_PATH
        EXTRA_TESTS: ./elastic-ha.sh
        K8S_USERNAME: ((cluster-username-development))
        K8S_PASSWORD: ((cluster-password-development))
        K8S_APISERVER: ((api-server-development))

- name: deploy-kubernetes-staging
  serial: true
  plan:
  - aggregate:
    - get: common
      resource: master-bosh-root-cert
    - get: pipeline-tasks
    - get: kubernetes-release
      params:
        submodules: none
    - get: kubernetes-config
      trigger: true
    - get: kubernetes-release-tarball
      trigger: true
    - get: common-secret
      resource: common-staging
      trigger: true
    - get: kubernetes-stemcell
      trigger: true
    - get: consul-boshrelease
      trigger: true
    - get: terraform-yaml
      resource: terraform-yaml-staging
  - task: kubernetes-manifest
    file: kubernetes-config/build-k8s-manifest.yml
    params:
      CLOUDWATCH_PARAMS: ((cloudwatch-params-staging))
      KUBE2IAM_PARAMS: ((kube2iam-params-staging))
      TARGET_ENVIRONMENT: staging
  - *lint-manifest
  - put: kubernetes-staging-deployment
    params: *deployment-params
  - task: create-kubernetes-dns
    file: pipeline-tasks/bosh-errand.yml
    params:
      BOSH_ERRAND: create-kubernetes-dns
      <<: *bosh-errand-staging
  - task: create-kubernetes-monitoring
    file: pipeline-tasks/bosh-errand.yml
    params:
      BOSH_ERRAND: create-kubernetes-monitoring
      <<: *bosh-errand-staging
  - task: apply-kubernetes-manifests
    file: pipeline-tasks/bosh-errand.yml
    params:
      BOSH_ERRAND: apply-kubernetes-manifests
      <<: *bosh-errand-staging
  on_failure:
    put: slack
    params:
      text: |
        :x: FAILED to deploy kubernetes on staging
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: Successfully deployed kubernetes on staging
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))

- name: deploy-kubernetes-broker-staging
  serial: true
  plan:
  - aggregate:
    - get: pipeline-tasks
    - get: kubernetes-broker
      trigger: true
    - get: kubernetes-config
      passed: [deploy-kubernetes-staging]
    - get: kubernetes-staging-deployment
      passed: [deploy-kubernetes-staging]
      trigger: true
  - task: run-tests
    file: kubernetes-config/run-tests.yml
  - put: kubernetes-broker-staging-deployment
    params:
      manifest: kubernetes-broker/manifest.yml
      path: kubernetes-broker
      current_app_name: kubernetes-broker
      environment_variables:
        AUTH_USER: ((broker-auth-user-staging))
        AUTH_PASS: ((broker-auth-pass-staging))
        CONNECTOR_TYPE: static
        CONSUL_DOMAIN: ((consul-domain-staging))
        CLUSTER_API_SERVER: ((api-server-staging))
        CLUSTER_USERNAME: ((cluster-username-staging))
        CLUSTER_PASSWORD: ((cluster-password-staging))
        CF_CLIENT_ID: kubernetes-client
        CF_CLIENT_SECRET: ((cf-client-secret-staging))
        CF_TOKEN_URL: ((cf-token-url-staging))
        CF_API_ENDPOINT: ((cf-api-url-staging))
        CF_TOKEN_KEY: ((cf-token-key-staging))
  - task: register-service-broker-staging
    file: pipeline-tasks/register-service-broker.yml
    params:
      <<: *cf-staging
      BROKER_NAME: kubernetes-broker
      AUTH_USER: ((broker-auth-user-staging))
      AUTH_PASS: ((broker-auth-pass-staging))
      SERVICES: ((broker-service-names-staging))

- name: acceptance-tests-staging
  serial: true
  plan:
  - aggregate:
    - get: kubernetes-config
      passed: [deploy-kubernetes-broker-staging]
      trigger: true
    - get: kubernetes-broker
      passed: [deploy-kubernetes-broker-staging]
      trigger: true
    # Get resources from upstream jobs for use in production deploy
    - get: kubernetes-release
      passed: [deploy-kubernetes-staging]
      params:
        submodules: none
    - get: kubernetes-release-tarball
      passed: [deploy-kubernetes-staging]
    - get: kubernetes-stemcell
    - get: consul-boshrelease
      passed: [deploy-kubernetes-staging]
  - task: clear-acceptance-space
    file: kubernetes-config/acceptance/clear-acceptance-space.yml
    params: *cf-staging-tests
  - aggregate:
    - task: acceptance-test-redis28-standard
      file: kubernetes-config/acceptance/run-acceptance-test.yml
      params:
        <<: *cf-staging-tests
        <<: *redis28-tests
    - task: acceptance-test-redis32-micro
      file: kubernetes-config/acceptance/run-acceptance-test.yml
      params:
        <<: *cf-staging-tests
        <<: *redis32-micro-tests
    - task: acceptance-test-redis32-standard
      file: kubernetes-config/acceptance/run-acceptance-test.yml
      params:
        <<: *cf-staging-tests
        <<: *redis32-tests
    - task: acceptance-test-redis32-standard-ha
      file: kubernetes-config/acceptance/run-acceptance-test.yml
      params:
        <<: *cf-staging-tests
        <<: *redis32-ha-tests
        # EXTRA TESTS are executed with CWD = TEST_PATH
        EXTRA_TESTS: ./redis-ha.sh
        K8S_USERNAME: ((cluster-username-staging))
        K8S_PASSWORD: ((cluster-password-staging))
        K8S_APISERVER: ((api-server-staging))
    - task: acceptance-test-mongo32-standard
      file: kubernetes-config/acceptance/run-acceptance-test.yml
      params:
        <<: *cf-staging-tests
        <<: *mongodb32-tests
    - task: acceptance-test-elasticsearch24-persistent
      file: kubernetes-config/acceptance/run-acceptance-test.yml
      params:
        <<: *cf-staging-tests
        <<: *elasticsearch24-tests
    - task: acceptance-test-elasticsearch24-ha
      file: kubernetes-config/acceptance/run-acceptance-test.yml
      params:
        <<: *cf-staging-tests
        SERVICE_NAME: elasticsearch24
        PLAN_NAME: medium-ha
        TEST_PATH: kubernetes-config/acceptance/elasticsearch24
        # EXTRA TESTS are executed with CWD = TEST_PATH
        EXTRA_TESTS: ./elastic-ha.sh
        K8S_USERNAME: ((cluster-username-staging))
        K8S_PASSWORD: ((cluster-password-staging))
        K8S_APISERVER: ((api-server-staging))

- name: deploy-kubernetes-production
  serial: true
  plan:
  - aggregate:
    - get: common
      resource: master-bosh-root-cert
    - get: pipeline-tasks
    - get: kubernetes-release
      passed: [acceptance-tests-staging]
      params:
        submodules: none
    # all triggers set to false until k8s AWS volume issues are sorted
    # once that happens it's ok to set all triggers below back to true
    - get: kubernetes-config
      trigger: false
      passed: [acceptance-tests-staging]
    - get: kubernetes-release-tarball
      passed: [acceptance-tests-staging]
      trigger: false
    - get: common-secret
      resource: common-production
      trigger: false
    - get: kubernetes-stemcell
      passed: [acceptance-tests-staging]
      trigger: false
    - get: consul-boshrelease
      passed: [acceptance-tests-staging]
      trigger: false
    - get: terraform-yaml
      resource: terraform-yaml-production
  - task: kubernetes-manifest
    file: kubernetes-config/build-k8s-manifest.yml
    params:
      CLOUDWATCH_PARAMS: ((cloudwatch-params-production))
      KUBE2IAM_PARAMS: ((kube2iam-params-production))
      TARGET_ENVIRONMENT: production
  - *lint-manifest
  - put: kubernetes-production-deployment
    params: *deployment-params
  - task: create-kubernetes-dns
    file: pipeline-tasks/bosh-errand.yml
    params:
      BOSH_ERRAND: create-kubernetes-dns
      <<: *bosh-errand-production
  - task: create-kubernetes-monitoring
    file: pipeline-tasks/bosh-errand.yml
    params:
      BOSH_ERRAND: create-kubernetes-monitoring
      <<: *bosh-errand-production
  - task: apply-kubernetes-manifests
    file: pipeline-tasks/bosh-errand.yml
    params:
      BOSH_ERRAND: apply-kubernetes-manifests
      <<: *bosh-errand-production
  on_failure:
    put: slack
    params:
      text: |
        :x: FAILED to deploy kubernetes on production
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: Successfully deployed kubernetes on production
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))

- name: deploy-kubernetes-broker-production
  serial: true
  plan:
  - aggregate:
    - get: pipeline-tasks
    - get: kubernetes-broker
      passed: [acceptance-tests-staging]
      trigger: true
    - get: kubernetes-config
      passed: [deploy-kubernetes-production]
      trigger: true
  - put: kubernetes-broker-production-deployment
    params:
      manifest: kubernetes-broker/manifest.yml
      path: kubernetes-broker
      current_app_name: kubernetes-broker
      environment_variables:
        AUTH_USER: ((broker-auth-user-production))
        AUTH_PASS: ((broker-auth-pass-production))
        CONNECTOR_TYPE: static
        CONSUL_DOMAIN: ((consul-domain-production))
        CLUSTER_API_SERVER: ((api-server-production))
        CLUSTER_USERNAME: ((cluster-username-production))
        CLUSTER_PASSWORD: ((cluster-password-production))
        CF_CLIENT_ID: kubernetes-client
        CF_CLIENT_SECRET: ((cf-client-secret-production))
        CF_TOKEN_URL: ((cf-token-url-production))
        CF_API_ENDPOINT: ((cf-api-url-production))
        CF_TOKEN_KEY: ((cf-token-key-production))
  - task: register-service-broker-production
    file: pipeline-tasks/register-service-broker.yml
    params:
      <<: *cf-production
      BROKER_NAME: kubernetes-broker
      AUTH_USER: ((broker-auth-user-production))
      AUTH_PASS: ((broker-auth-pass-production))
      SERVICES: ((broker-service-names-production))

- name: acceptance-tests-production
  serial: true
  plan:
  - aggregate:
    - get: kubernetes-config
      passed: [deploy-kubernetes-broker-production]
      trigger: true
    - get: kubernetes-broker
      passed: [deploy-kubernetes-broker-production]
      trigger: true
  - task: clear-acceptance-space
    file: kubernetes-config/acceptance/clear-acceptance-space.yml
    params: *cf-production-tests
  - aggregate:
    - task: acceptance-test-redis28-standard
      file: kubernetes-config/acceptance/run-acceptance-test.yml
      params:
        <<: *cf-production-tests
        <<: *redis28-tests
    - task: acceptance-test-redis32-micro
      file: kubernetes-config/acceptance/run-acceptance-test.yml
      params:
        <<: *cf-production-tests
        <<: *redis32-micro-tests
    - task: acceptance-test-redis32-standard
      file: kubernetes-config/acceptance/run-acceptance-test.yml
      params:
        <<: *cf-production-tests
        <<: *redis32-tests
    - task: acceptance-test-redis32-standard-ha
      file: kubernetes-config/acceptance/run-acceptance-test.yml
      params:
        <<: *cf-production-tests
        <<: *redis32-ha-tests
        # EXTRA TESTS are executed with CWD = TEST_PATH
        EXTRA_TESTS: ./redis-ha.sh
        K8S_USERNAME: ((cluster-username-production))
        K8S_PASSWORD: ((cluster-password-production))
        K8S_APISERVER: ((api-server-production))
    - task: acceptance-test-mongo32-standard
      file: kubernetes-config/acceptance/run-acceptance-test.yml
      params:
        <<: *cf-production-tests
        <<: *mongodb32-tests
    - task: acceptance-test-elasticsearch24-persistent
      file: kubernetes-config/acceptance/run-acceptance-test.yml
      params:
        <<: *cf-production-tests
        <<: *elasticsearch24-tests
    - task: acceptance-test-elasticsearch24-ha
      file: kubernetes-config/acceptance/run-acceptance-test.yml
      params:
        <<: *cf-production-tests
        SERVICE_NAME: elasticsearch24
        PLAN_NAME: medium-ha
        TEST_PATH: kubernetes-config/acceptance/elasticsearch24
        # EXTRA TESTS are executed with CWD = TEST_PATH
        EXTRA_TESTS: ./elastic-ha.sh
        K8S_USERNAME: ((cluster-username-production))
        K8S_PASSWORD: ((cluster-password-production))
        K8S_APISERVER: ((api-server-production))

- name: test-exporter
  plan:
  - aggregate:
    - get: exporter-src
      trigger: true
    - get: kubernetes-config
  - task: test
    file: kubernetes-config/test-exporter.yml

- name: test-exporter-development
  plan:
  - aggregate:
    - get: exporter-src
      resource: exporter-src-development
      trigger: true
    - get: kubernetes-config
      resource: kubernetes-config-development
  - task: test
    file: kubernetes-config/test-exporter.yml

- name: deploy-exporter-development
  plan:
  - get: exporter-src
    resource: exporter-src-development
    passed: [test-exporter-development]
    trigger: true
  - put: exporter-app-development
    params:
      path: exporter-src
      manifest: exporter-src/manifest.yml
      current_app_name: kubernetes-broker-exporter
      environment_variables:
        BROKER_EXPORTER_KUBERNETES_URL: ((api-server-development))
        BROKER_EXPORTER_KUBERNETES_USERNAME: ((cluster-username-development))
        BROKER_EXPORTER_KUBERNETES_PASSWORD: ((cluster-password-development))
        BROKER_EXPORTER_KUBERNETES_NAMESPACE: default
        BROKER_EXPORTER_CONSUL_DOMAIN: service.kubernetes
        BROKER_EXPORTER_WEB_AUTH_USERNAME: ((exporter-auth-username-development))
        BROKER_EXPORTER_WEB_AUTH_PASSWORD: ((exporter-auth-password-development))
        BROKER_EXPORTER_METRICS_ENVIRONMENT: development
  on_failure:
    put: slack
    params:
      text: |
        :x: FAILED to deploy kubernetes broker exporter on development
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: Successfully deployed kubernetes broker exporter on development
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))

- name: deploy-exporter-staging
  plan:
  - get: exporter-src
    passed: [test-exporter]
    trigger: true
  - put: exporter-app-staging
    params:
      path: exporter-src
      manifest: exporter-src/manifest.yml
      current_app_name: kubernetes-broker-exporter
      environment_variables:
        BROKER_EXPORTER_KUBERNETES_URL: ((api-server-staging))
        BROKER_EXPORTER_KUBERNETES_USERNAME: ((cluster-username-staging))
        BROKER_EXPORTER_KUBERNETES_PASSWORD: ((cluster-password-staging))
        BROKER_EXPORTER_KUBERNETES_NAMESPACE: default
        BROKER_EXPORTER_CONSUL_DOMAIN: service.kubernetes
        BROKER_EXPORTER_WEB_AUTH_USERNAME: ((exporter-auth-username-staging))
        BROKER_EXPORTER_WEB_AUTH_PASSWORD: ((exporter-auth-password-staging))
        BROKER_EXPORTER_METRICS_ENVIRONMENT: staging
  on_failure:
    put: slack
    params:
      text: |
        :x: FAILED to deploy kubernetes broker exporter on staging
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: Successfully deployed kubernetes broker exporter on staging
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))

- name: deploy-exporter-production
  plan:
  - get: exporter-src
    passed: [deploy-exporter-staging]
    trigger: true
  - put: exporter-app-production
    params:
      path: exporter-src
      manifest: exporter-src/manifest.yml
      current_app_name: kubernetes-broker-exporter
      environment_variables:
        BROKER_EXPORTER_KUBERNETES_URL: ((api-server-production))
        BROKER_EXPORTER_KUBERNETES_USERNAME: ((cluster-username-production))
        BROKER_EXPORTER_KUBERNETES_PASSWORD: ((cluster-password-production))
        BROKER_EXPORTER_KUBERNETES_NAMESPACE: default
        BROKER_EXPORTER_CONSUL_DOMAIN: service.kubernetes
        BROKER_EXPORTER_WEB_AUTH_USERNAME: ((exporter-auth-username-production))
        BROKER_EXPORTER_WEB_AUTH_PASSWORD: ((exporter-auth-password-production))
        BROKER_EXPORTER_METRICS_ENVIRONMENT: production
  on_failure:
    put: slack
    params:
      text: |
        :x: FAILED to deploy kubernetes broker exporter on production
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: Successfully deployed kubernetes broker exporter on production
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))

resources:
- name: master-bosh-root-cert
  type: s3-iam
  source:
    bucket: ((kubernetes-production-private-bucket))
    region_name: ((aws-region))
    versioned_file: master-bosh.crt

- name: pipeline-tasks
  type: git
  source:
    uri: ((pipeline-tasks-git-url))
    branch: ((pipeline-tasks-git-branch))

- name: kubernetes-release
  type: git
  source:
    uri: ((kubernetes-release-git-url))
    branch: ((kubernetes-release-git-branch))

- name: kubernetes-release-development
  type: git
  source:
    uri: ((kubernetes-release-development-git-url))
    branch: ((kubernetes-release-development-git-branch))

- name: kubernetes-broker
  type: git
  source:
    uri: ((kubernetes-broker-git-url))
    branch: ((kubernetes-broker-git-branch))

- name: kubernetes-broker-development
  type: git
  source:
    uri: ((kubernetes-broker-development-git-url))
    branch: ((kubernetes-broker-development-git-branch))

- name: kubernetes-config
  type: git
  source:
    uri: ((kubernetes-config-git-url))
    branch: ((kubernetes-config-git-branch))

- name: kubernetes-config-development
  type: git
  source:
    uri: ((kubernetes-config-development-git-url))
    branch: ((kubernetes-config-development-git-branch))

- name: exporter-src
  type: git
  source:
    uri: ((exporter-src-git-uri))
    branch: ((exporter-src-git-branch))

- name: exporter-src-development
  type: git
  source:
    uri: ((exporter-src-development-git-uri))
    branch: ((exporter-src-development-git-branch))

- name: kubernetes-stemcell
  type: bosh-io-stemcell
  source:
    name: bosh-aws-xen-hvm-ubuntu-trusty-go_agent

- name: consul-boshrelease
  type: bosh-io-release
  source:
    repository: cloudfoundry-community/consul-boshrelease

- name: common-development
  type: cg-common
  source:
    region: ((aws-region))
    bucket_name: ((kubernetes-development-private-bucket))
    secrets_file: development-kubernetes.yml
    secrets_passphrase: ((kubernetes-development-private-passphrase))
    bosh_cert: bosh.pem

- name: common-staging
  type: cg-common
  source:
    region: ((aws-region))
    bucket_name: ((kubernetes-staging-private-bucket))
    secrets_file: staging-kubernetes.yml
    secrets_passphrase: ((kubernetes-staging-private-passphrase))
    bosh_cert: bosh.pem

- name: common-production
  type: cg-common
  source:
    region: ((aws-region))
    bucket_name: ((kubernetes-production-private-bucket))
    secrets_file: production-kubernetes.yml
    secrets_passphrase: ((kubernetes-production-private-passphrase))
    bosh_cert: bosh.pem

- name: kubernetes-development-deployment
  type: bosh-deployment
  source:
    target: ((kubernetes-development-deployment-bosh-target))
    client: ((kubernetes-development-deployment-bosh-client))
    client_secret: ((kubernetes-development-deployment-bosh-client-secret))
    ca_cert: ((kubernetes-development-ca-cert))
    deployment: kubernetes

- name: kubernetes-staging-deployment
  type: bosh-deployment
  source:
    target: ((kubernetes-staging-deployment-bosh-target))
    client: ((kubernetes-staging-deployment-bosh-client))
    client_secret: ((kubernetes-staging-deployment-bosh-client-secret))
    ca_cert: ((kubernetes-staging-ca-cert))
    deployment: kubernetes

- name: kubernetes-production-deployment
  type: bosh-deployment
  source:
    target: ((kubernetes-production-deployment-bosh-target))
    client: ((kubernetes-production-deployment-bosh-client))
    client_secret: ((kubernetes-production-deployment-bosh-client-secret))
    ca_cert: ((kubernetes-production-ca-cert))
    deployment: kubernetes

- name: kubernetes-broker-development-deployment
  type: cf
  source:
    api: ((cf-api-url-development))
    username: ((cf-deploy-username-development))
    password: ((cf-deploy-password-development))
    organization: ((cf-organization-development))
    space: ((cf-space-development))

- name: kubernetes-broker-staging-deployment
  type: cf
  source:
    api: ((cf-api-url-staging))
    username: ((cf-deploy-username-staging))
    password: ((cf-deploy-password-staging))
    organization: ((cf-organization-staging))
    space: ((cf-space-staging))

- name: kubernetes-broker-production-deployment
  type: cf
  source:
    api: ((cf-api-url-production))
    username: ((cf-deploy-username-production))
    password: ((cf-deploy-password-production))
    organization: ((cf-organization-production))
    space: ((cf-space-production))

- name: exporter-app-development
  type: cf
  source:
    api: ((cf-api-url-development))
    username: ((cf-deploy-username-development))
    password: ((cf-deploy-password-development))
    organization: ((cf-organization-development))
    space: ((cf-space-development))

- name: exporter-app-staging
  type: cf
  source:
    api: ((cf-api-url-staging))
    username: ((cf-deploy-username-staging))
    password: ((cf-deploy-password-staging))
    organization: ((cf-organization-staging))
    space: ((cf-space-staging))

- name: exporter-app-production
  type: cf
  source:
    api: ((cf-api-url-production))
    username: ((cf-deploy-username-production))
    password: ((cf-deploy-password-production))
    organization: ((cf-organization-production))
    space: ((cf-space-production))

- name: slack
  type: slack-notification
  source:
    url: ((slack-webhook-url))

- name: fluentd-cloudwatch-config
  type: git
  source:
    uri: ((kubernetes-config-git-url))
    branch: ((kubernetes-config-git-branch))
    paths:
    - images/fluentd-cloudwatch/*

- name: kubernetes-broker-images
  type: git
  source:
    uri: ((kubernetes-broker-git-url))
    branch: ((docker-images-git-branch))
    paths:
    - custom_images/*

- name: dockerfile-elasticsearch-base
  type: git
  source:
    uri: https://github.com/docker-library/elasticsearch
    branch: master
    paths:
    - 2.4/*

- name: docker-hub-fluentd-cloudwatch
  type: docker-image
  source:
    email: ((docker-email))
    username: ((docker-username))
    password: ((docker-password))
    repository: ((docker-repo-fluentd))
    tag: ((docker-tag-fluentd-cloudwatch))

- name: docker-hub-elasticsearch-24
  type: docker-image
  source:
    email: ((docker-email))
    username: ((docker-username))
    password: ((docker-password))
    repository: ((docker-repo-elastic))
    tag: ((docker-tag-elasticsearch-24))

- name: docker-hub-mongo-32
  type: docker-image
  source:
    email: ((docker-email))
    username: ((docker-username))
    password: ((docker-password))
    repository: ((docker-repo-mongo))
    tag: ((docker-tag-mongo))

- name: docker-hub-elasticsearch-base
  type: docker-image
  source:
    email: ((docker-email))
    username: ((docker-username))
    password: ((docker-password))
    repository: ((docker-repo-elastic-base))
    tag: ((docker-tag-elastic-base))

- name: docker-hub-elasticsearch-ha
  type: docker-image
  source:
    email: ((docker-email))
    username: ((docker-username))
    password: ((docker-password))
    repository: ((docker-repo-elastic-ha))
    tag: ((docker-tag-elastic-ha))

- name: docker-hub-redis32
  type: docker-image
  source:
    email: ((docker-email))
    username: ((docker-username))
    password: ((docker-password))
    repository: ((docker-repo-redis))
    tag: ((docker-tag-redis32))


- &kubernetes-release-tarball
  name: kubernetes-release-tarball
  type: s3-iam
  source:
    bucket: ((s3-bosh-releases-bucket))
    regexp: kubernetes-(.*).tgz
    region_name: us-gov-west-1

- <<: *kubernetes-release-tarball
  name: kubernetes-release-tarball-development

- name: terraform-yaml-development
  type: s3-iam
  source:
    bucket: ((tf-state-bucket-development))
    versioned_file: ((tf-state-file-development))
    region_name: ((aws-region))

- name: terraform-yaml-staging
  type: s3-iam
  source:
    bucket: ((tf-state-bucket-staging))
    versioned_file: ((tf-state-file-staging))
    region_name: ((aws-region))

- name: terraform-yaml-production
  type: s3-iam
  source:
    bucket: ((tf-state-bucket-production))
    versioned_file: ((tf-state-file-production))
    region_name: ((aws-region))
- name: erry-day
  type: time
  source: {interval: 24h}

resource_types:
- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource

- name: bosh-deployment
  type: docker-image
  source:
    repository: cloudfoundry/bosh-deployment-resource

- name: cg-common
  type: docker-image
  source:
    repository: 18fgsa/cg-common-resource

- name: s3-iam
  type: docker-image
  source:
    repository: 18fgsa/s3-resource
